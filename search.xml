<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[excel技巧]]></title>
    <url>%2F2019%2F04%2F04%2Fexcel%E6%8A%80%E5%B7%A7-0%2F</url>
    <content type="text"><![CDATA[损坏的excel文件如何修复 1.新建一个excel文件，并点击打开，在excel中，点击左上角【文件】2.这时在左侧会弹出excel选项页面，我们找到【选项】按钮并点击打开3.此时会弹出EXCEL选项页面，在此页面里先点击信任中心，然后在右侧弹出的页面再点击【信任中心设置】4.在弹出的信任中心页面里点击【受保护的视图】此时右边会弹出受保护视图的类型，我们将其中的选项全部取消勾选。5.完成以上步骤后，我们再在信任中心页面里，点击受信任位置，在右侧弹出的页面里点击【添加新位置】把你所要修复文件的位置添加进去即可6.以上步骤完成后我们再点击我们需要打开的EXCEL文件就可以了]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python程序题（持续更新中）]]></title>
    <url>%2F2019%2F04%2F02%2FPython%E7%BB%83%E4%B9%A0%E9%A2%98%2F</url>
    <content type="text"><![CDATA[程序题 一、Hello World的条件输出 获得用户输入的一个整数，参考该整数值，打印输出”Hello World”，要求：‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬如果输入值是0，直接输出”Hello World”‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬如果输入值大于0，以两个字符一行方式输出”Hello World”（空格也是字符）‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬如果输入值小于0，以垂直方式输出”Hello World”‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬ 1234567n = input()if eval(n) == 0: print('Hello World')elif eval(n) &gt; 0: print("He\nll\no \nWo\nrl\nd")else : print("H\ne\nl\nl\no\n \nW\no\nr\nl\nd") 二、数值运算 获得用户输入的一个字符串，格式如下：M OP N其中，M和N是任何数字，OP代表一种操作，表示为如下四种：+, -, *, /（加减乘除）‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬根据OP，输出M OP N的运算结果，统一保存小数点后2位。‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬ 12l =input()print(&apos;&#123;:.2f&#125;&apos;.format(eval(l))) 三、温度转换 温度的刻画有两个不同体系：摄氏度（Celsius）和华氏度（Fahrenheit）。编写程序将用户输入华氏度转换为摄氏度，或将输入的摄氏度转化为华氏度算法如下：C = (F - 32)/1.8F = C *１.８+32 12345678910#温度转换TempTtr = input('')if TempTtr[-1] in ['F','f']: C = (eval(TempTtr[0:-1])-32)/1.8 print('&#123;:.2f&#125;C'.format(C))elif TempTtr[-1] in ['C','c']: F = eval(TempTtr[0:-1])*1.8 + 32 print('&#123;:.2f&#125;F'.format(F))else: print('输入格式错误') 举一反三：货币转换同理 12345CurStr = input()if CurStr[:3] == &quot;RMB&quot;: print(&quot;USD&#123;:.2f&#125;&quot;.format(eval(CurStr[3:])/6.78))elif CurStr[:3] in [&apos;USD&apos;]: print(&quot;RMB&#123;:.2f&#125;&quot;.format(eval(CurStr[3:])*6.78)) 四、数字形式转换12345t = &apos;零一二三四五六七八九&apos;l = input()for s in l: print(t[eval(s)],end =&apos;&apos;)注：print()中增加end=&quot;&quot;参数表示输出后不增加换行，多个print()可以连续输出。 五、Python蟒蛇绘制 使用turtle库，绘制一个蟒蛇形状的图形 1234567891011121314151617#PythonDraw.pyimport turtleturtle.setup(650, 350, 200, 200)turtle.penup()turtle.fd(-250)turtle.pendown()turtle.pensize(25)turtle.pencolor(&quot;purple&quot;)turtle.seth(-40)for i in range(4): turtle.circle(40, 80) turtle.circle(-40, 80)turtle.circle(40, 80/2)turtle.fd(40)turtle.circle(16, 180)turtle.fd(40 * 2/3)turtle.done()]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[oracle学习]]></title>
    <url>%2F2019%2F04%2F01%2Foracle%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[Oracle数据库oracle是一个数据库管理系统，是Oracle公司的核心产品。其在数据安全性与完整性控制方面有着优越的性能，以及跨操作系统、跨平台的数据操作能力。是基于C/S系统结构。 特点： 支持多用户、大事务量的事务处理能力。 在保持数据安全性和完整性方面性能优越。 支持分布式数据处理。 具有可移植性。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo之修改内容区域的宽度]]></title>
    <url>%2F2019%2F03%2F30%2FHexo%E4%B9%8B%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9%E5%8C%BA%E5%9F%9F%E7%9A%84%E5%AE%BD%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[修改内容区域的宽度编辑主题的 source/css/_variables/custom.styl 文件，新增变量： 12345// 修改成你期望的宽度$content-desktop = 700px// 当视窗超过 1600px 后的宽度$content-desktop-large = 900px]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[技能树]]></title>
    <url>%2F2019%2F03%2F30%2F%E6%8A%80%E8%83%BD%E6%A0%91%2F</url>
    <content type="text"><![CDATA[一、如何做事1.方法论 完成一件事有好几条途径，优秀的人的途径最短 任务拆分很容易得出做事的方法论 任务拆分 过长过程会经历：能力越大、责任越大、事情越多 思路 拆分细化多个点 排好优先级 任务四象限，决定优先级 SMART原则 自己欠缺什么，立马发现 学会团队作战 2.沟通、反馈与责任 一个无沟通能力的人，要么是天才，要么是不可爱的人，不过天才也就寥寥无几而已。 反馈要及时 避免出问题不反馈，影响进度 方式 正式的：邮件 临时的：微信等即时通信 着急的：电话 工作有大小，责任心无大小 认识周报的意义 意义：大家互相了解工作与心得，有利于自己的判断与成长 周报需体现本周工作总结、下周工作计划、心得/问题/建议 可以体现一个人的总结能力、计划能力、分享能力 二、成长1.完成的定义 比如写个PoC(概念验证) 1、搞懂目标Web应用漏洞的原理 2、熟练运用Python各相关模块与机制 3、熟练了解HTTP协议 HTTP请求 HTTP响应 4、代码书写规范，让人看起来舒服 5、程序经过足够的测试 黑盒测试 白盒测试 6、及时反馈进度 7、更新相关文档。 2.熟练的定义 比如熟练SQL注入 SQL语句可以脱离文档顺手写出 主流数据库的SQL特有函数、存储过程、机制都特别了解 实战过N回，可以解决各种奇葩环境问题 具备创造性，写出自己的脚本工具 3.好书推荐 鸡汤类 黑客与画家 浪潮之巅 传递代码之美 重构 代码整洁之道 代码大全 产品类 人人都是产品经理 结网 提升思维 自私的基因 失控 三、专业技能1.提升技能你要知道 至少完整看完和练习好一本看过的专业书籍 至少过一遍学习的官方文档 2.基础必备 HTTP抓包与调试 Office能力 Linux 熟悉虚拟化 Python基础 正则表达式 翻墙-了解国外 3.不同发展方向的进阶之路 Python自动化运维 数据分析师 测试工程师 DBA 项目经理 4.研发必备 Django http://djangobook.py3k.cn/2.0/ Django Debug Toolbar 编码环境 pip vim Docker Markdown 等 版本控制 GIt GitLab 爬虫进阶 代理池 网络请求 四、我的工具1.linux进阶书 《鸟哥的Linux私房菜》 《Linux shell脚本攻略》 《UNix编程艺术》 2.Python进阶 官方手册 至少要过一遍，不然视野会局限 熟悉scrapy、redis、mongodb、myql 熟悉docker和Django]]></content>
      <categories>
        <category>个人成长</category>
      </categories>
      <tags>
        <tag>技能</tag>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git常用命令]]></title>
    <url>%2F2019%2F03%2F29%2Fgit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[一、git基本命令1.git创建分支并提交到远程分支 1234git checkout -b hexo #创建hexo分支并进入该分支git branch #查看以有分支git push origin hexo #提交该分支到远程仓库git branch --set-upstream-to=origin/hexo #建立本地到远端仓的链接 2.将一个远程库拷贝到本地 1git clone https://github.com/linuxgrf/linuxgrf.github.io.git 3.检查当前跟踪文件的状态 1git status 4.提交更新 12git addgit commit -m &quot;说明字符串&quot; #提交保存到仓库 二、git分支管理1.创建分支命令 1git branch (branchname) 2.切换分支命令 1git checkout (branchname) 3.合并分支 1git merge (branchname) 4.创建新分支并切换到该分支下 1git checkout -b (branchname) 5.删除分支命令 1git branch -d (branchname) 三、查看日志版本1.列出历史提交记录 1286155@DESKTOP-O99ELN7 MINGW64 /g/Hexo/linuxgrf.github.io (hexo)$ git log 2.查看历史记录的简洁版本 1git log --oneline 3.查看历史中什么时候出现分支、合并 1git log --oneline --graph]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PMP项目管理]]></title>
    <url>%2F2019%2F03%2F29%2FPMP%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[天天向上的力量]]></title>
    <url>%2F2019%2F03%2F29%2F%E5%A4%A9%E5%A4%A9%E5%90%91%E4%B8%8A%E7%9A%84%E5%8A%9B%E9%87%8F%2F</url>
    <content type="text"><![CDATA[1234GRIT（坚持）是获得成功最重要的因素之一，牢记天天向上的力量dayup = pow(1.1,365)daydown = pow(0.9,365)print("向上：&#123;:.2f&#125;,向下：&#123;:.2f&#125;".format(dayup,daydown)) 1输出：向上：1283305580313390.50,向下：0.00 一、python基础1.数字运算函数一些以函数形式提供的数值运算功能 abs(x) 绝对值，x的绝对值divmod(x,y) 商于，(x//y,x%y)，同时输出商和余数pow(x,y[,z]) 幂于，(x**y)%z,[..]表示参数z可以省略round(x[,d]) 四舍五入，d是保留小数位数，默认为max(x1,x2,…) 判断最大值 2.天天向上代码1234567891011121314151617181920工作日模式要努力到什么水平，才能与每天努力1%一样？‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭-A君: 一年365天，每天进步1%，不停歇 ‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭-B君: 一年365天，每周工作5天休息2天，休息日下降1% ，要多努力呢？‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭每周工作5天休息2天，计算工作日的努力参数是多少才能与每天努力1%一样。‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭def dayUP(df): dayup = 1 for i in range(365): if i % 7 in [6,0]: dayup = dayup*(1 - 0.01) else: dayup = dayup*(1 + df) return dayupdayfactor = 0.01while dayUP(dayfactor) &lt; 37.78: dayfactor += 0.001print("工作日的努力参数是: &#123;:.3f&#125;".format(dayfactor))]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo搭建到个性化设计]]></title>
    <url>%2F2019%2F03%2F29%2Fhexo%2F</url>
    <content type="text"><![CDATA[一、建站前提1.了解Hexo Hexo是高效的静态站点生成框架，她基于Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的标签插件来快速的插入特定形式的内容，而且相对于其他框架，Hexo在速度上也有很大优势。 2.搭建Node.js环境 下载地址：http://nodejs.cn/download测试安装：命令行使用node -v 、mpm -v，查看显示版本号即成功。 3.安装Hexo博客框架工具 npm install hexo-cli -g 4.安装Git版本工具 下载地址：https://git-scm.com/downloads 5.注册Github账号 我们需要通过Github得到自己的博客网站域名，而且需要使用gitHub同步我们个人博客的相关文件。注册地址：https://github.com 二、搭建博客1.hexo官方文档 https://hexo.io/zh-cn/docs/setup.html 2.个性化配置 我个人认为比较好的 http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo下Markdown的使用]]></title>
    <url>%2F2019%2F03%2F29%2FMarkdown%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[一、创建文章 在站点文件夹中打开 git bash，输入如下命令创建文章，其中 title 为文章的标题 $ hexo new “title” 当输入命令后，就会在 source/_post 文件夹下创建一个文件，命名为：title.md 这个文件就是将要发布到网站上的原始文件，用于记录文章内容。 二、编写文章 1、Markdown 简介Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式 2、Markdown语法2.1、Typora 快捷键：Ctrl+1：一级标题 Ctrl+2：二级标题 Ctrl+3：三级标题 Ctrl+4：四级标题 Ctrl+5：五级标题 Ctrl+6 ：六级标题 Ctrl+0：段落 2.2、Markdown 语法： 12345*斜体***粗体*****加粗斜体***~~删除线~~1234 Typora 快捷键： Ctrl+I：斜体 Ctrl+B：粗体 Ctrl+U：下划线 Alt+Shift+5：删除线 3、引用块3.1、文字引用 Markdown 语法： 在Typora中输入””” + 回车，并在后面选择一个语言名称即可语法高亮。 语法高亮:\ 1234&gt; &gt; &gt; def helloWorld():&gt; &gt; &gt; print &apos;hello, world&apos;&gt; &gt; &gt; &gt; &gt; 3.2、表 输入| 表头1 | 表头2 |并回车。即可将创建一个包含两列的表，然后就像操作Word文档一样设置表格即可，没必要知道Markdown的复杂语法，因为这些语法会由Typora自动生成。效果如下： First Header Second Header 3.3、分割线 输入***或--- 再按回车即可绘制一条水平线，如下： 3.4、链接内部链接 这是一个带有标题属性的链接.这是一个没有标题属性的链接&gt;. 效果如下： 这是一个带有标题属性的链接.这是一个没有标题属性的链接 Typora 快捷键：** 行内代码：Ctrl+Shift+` 多行代码：Ctrl+Shift+K 3.5代码标记 标记代码使用反引号，即在英文输入法下，ESC键下面和1键左边的符号——` 使用该printf()功能。效果如下：使用该printf()功能。 3.6、删除线(中间没有空格) ~ ~删除线~ ~ 效果如下： 删除线 3.7、下划线 \下划线 效果如下： 下划线 4、内置样式4.1.分割线和空行 这是文字 12&gt; &lt;hr /&gt;&gt; 上面是分隔线 12&gt; &lt;br /&gt;&gt; 上面是空行]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World纪念建立的第一个博客]]></title>
    <url>%2F2019%2F03%2F28%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
